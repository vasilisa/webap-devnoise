{"ast":null,"code":"var _jsxFileName = \"/Users/vasilisaskvortsova/Documents/RLNOISE_KIDS/webap-rlnoise-kids/src/components/QuizBlock/QuizBlock.js\";\nimport React, { Component } from 'react';\nimport { API_URL } from '../../config';\nimport Quiz from '../Quiz/Quiz';\nimport Report from '../Report/Report';\nimport ReportNA from '../ReportNA/ReportNA';\n\nclass QuizBlock extends Component {\n  constructor(props) {\n    super(props); // Get the right questions JSON part\n\n    console.log(this.props.location.state.questions);\n    var quizQuestionsBlock = this.props.location.state.questions.filter(d => d.surveytag === this.props.location.state.block_info.surveytag); // console.log(quizQuestionsBlock)\n\n    this.state = {\n      counter: 0,\n      questionCount: 1,\n      // count across all questions in the questionnaire \n      question: '',\n      answerOptions: [],\n      answer: '',\n      qtype: '',\n      // the type of the question to be asked\n      questionId: '',\n      // Question id stored in the JS object, does not have to be consecuitive. \n      answersCount: {},\n      result: '',\n      constraint: [],\n      quizQuestionsBlock: quizQuestionsBlock,\n      participant_info: this.props.location.state.participant_info,\n      // This is to be recorded and POSTED to the DB\n      answered_questionsId: [],\n      answered_questionsContent: []\n    };\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n    this.redirectToSurvey = this.redirectToSurvey.bind(this);\n  }\n\n  componentDidMount() {\n    const firstQuestion = this.state.quizQuestionsBlock[0];\n    var shuffledAnswerOptions = this.state.quizQuestionsBlock.map(question => this.NoShuffleArray(question.answers)); // if (this.state.do_shuffle===true){\n    //   const shuffledAnswerOptions = this.state.quizQuestionsBlock.map(question =>\n    //   this.shuffleArray(question.answers));\n    // }\n\n    document.body.style.background = '#fff';\n    this.setState({\n      questionId: firstQuestion.questionId,\n      qtype: firstQuestion.qtype,\n      question: firstQuestion.question,\n      answerOptions: shuffledAnswerOptions[0],\n      constraint: firstQuestion.constraint\n    });\n  }\n\n  shuffleArray(array) {\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex; // While there remain elements to shuffle...\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1; // And swap it with the current element.\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  NoShuffleArray(array) {\n    var currentIndex = array.length;\n    return array;\n  } // onAnswerSelected points to this function in AnswerOption.js \n\n\n  handleAnswerSelected(answerContent, questionId, event) {\n    // console.log(answerContent) \n    this.setUserAnswer(event.currentTarget.value, answerContent, questionId); // event.currentTarget.value); // to be changed to see what is recorded \n\n    if (this.state.questionCount < this.state.quizQuestionsBlock.length) {\n      // to change to the number of questions in this part of the Survey\n      setTimeout(() => this.setNextQuestion(), 300);\n    } else {\n      setTimeout(() => this.redirectToSurvey(), 300);\n    }\n  }\n\n  setUserAnswer(answer, answerContent, questionId) {\n    // This is to be recorded and POSTED to the DB\n    let answered_questionsId = this.state.answered_questionsId;\n    answered_questionsId.push(questionId);\n    let answered_questionsContent = this.state.answered_questionsContent;\n    answered_questionsContent.push(answerContent);\n    this.setState((state, props) => ({\n      answer: answer,\n      answered_questionsId: answered_questionsId,\n      answered_questionsContent: answered_questionsContent\n    }));\n  }\n\n  setNextQuestion() {\n    const counter = this.state.counter + 1;\n    const questionCount = this.state.questionCount + 1;\n    const nextQuestion = this.state.quizQuestionsBlock[counter];\n    this.setState({\n      counter: counter,\n      questionCount: questionCount,\n      questionId: nextQuestion.questionId,\n      question: nextQuestion.question,\n      answerOptions: nextQuestion.answers,\n      answer: '',\n      qtype: nextQuestion.qtype,\n      constraint: nextQuestion.constraint // check if exists otherwise empty to implement \n\n    });\n  }\n\n  redirectToSurvey() {\n    let block_id = this.state.participant_info.block_number + 1;\n\n    if (this.state.participant_info.block_number < this.state.participant_info.TotalBlock) {\n      var completed = 'no';\n    } else if (this.state.participant_info.block_number === this.state.participant_info.TotalBlock) {\n      var completed = 'yes'; // add if it is aborted here later \n    }\n\n    let body = {\n      'participant_id': this.state.participant_info.participant_id,\n      'prolific_id': this.state.participant_info.prolific_id,\n      'block_number': this.state.participant_info.block_number + 1,\n      'block_name': this.props.location.state.block_info.surveytag,\n      'question_ids': this.state.answered_questionsId,\n      'answers': this.state.answered_questionsContent,\n      'date': this.state.participant_info.date,\n      'survey_completed': completed\n    }; // console.log(body)\n\n    fetch(`${API_URL}/participants_question_data/create/` + this.state.participant_info.participant_id + `/` + block_id + `/` + this.state.participant_info.prolific_id, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    });\n    this.props.history.push({\n      pathname: `/Survey`,\n      state: {\n        participant_info: this.state.participant_info,\n        newblock_frame: false\n      }\n    });\n  }\n\n  setResults(result) {\n    if (result.length === 1) {\n      this.setState({\n        result: result[0]\n      });\n    } else {\n      this.setState({\n        result: 'Undetermined'\n      });\n    }\n  }\n\n  renderQuiz() {\n    if (this.state.qtype === \"quiz\") {\n      return React.createElement(Quiz, {\n        answer: this.state.answer,\n        answerOptions: this.state.answerOptions,\n        questionId: this.state.questionId,\n        questionCount: this.state.questionCount,\n        question: this.state.question,\n        questionTotal: this.state.quizQuestionsBlock.length,\n        onAnswerSelected: this.handleAnswerSelected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      });\n    } else if (this.state.qtype === \"report\") {\n      return React.createElement(Report, {\n        answer: this.state.answer,\n        answerOptions: this.state.answerOptions,\n        questionId: this.state.questionId,\n        questionCount: this.state.questionCount,\n        question: this.state.question,\n        questionTotal: this.state.quizQuestionsBlock.length,\n        onAnswerSelected: this.handleAnswerSelected // questions       ={this.state.questions}\n        ,\n        constraint: this.state.constraint,\n        participant_info: this.state.participant_info,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      });\n    } else if (this.state.qtype === \"report-na\") {\n      return React.createElement(ReportNA, {\n        answer: this.state.answer,\n        answerOptions: this.state.answerOptions,\n        questionId: this.state.questionId,\n        questionCount: this.state.questionCount,\n        question: this.state.question,\n        questionTotal: this.state.quizQuestionsBlock.length,\n        onAnswerSelected: this.handleAnswerSelected,\n        constraint: this.state.constraint,\n        participant_info: this.state.participant_info,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"QuizBlock\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"QuizBlock-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, this.state.quizQuestionsBlock[this.state.counter].title)), this.state.result ? this.redirectToSurvey() : this.renderQuiz());\n  }\n\n}\n\nexport default QuizBlock;","map":{"version":3,"sources":["/Users/vasilisaskvortsova/Documents/RLNOISE_KIDS/webap-rlnoise-kids/src/components/QuizBlock/QuizBlock.js"],"names":["React","Component","API_URL","Quiz","Report","ReportNA","QuizBlock","constructor","props","console","log","location","state","questions","quizQuestionsBlock","filter","d","surveytag","block_info","counter","questionCount","question","answerOptions","answer","qtype","questionId","answersCount","result","constraint","participant_info","answered_questionsId","answered_questionsContent","handleAnswerSelected","bind","redirectToSurvey","componentDidMount","firstQuestion","shuffledAnswerOptions","map","NoShuffleArray","answers","document","body","style","background","setState","shuffleArray","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","answerContent","event","setUserAnswer","currentTarget","value","setTimeout","setNextQuestion","push","nextQuestion","block_id","block_number","TotalBlock","completed","participant_id","prolific_id","date","fetch","method","headers","JSON","stringify","history","pathname","newblock_frame","setResults","renderQuiz","render","title"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { API_URL } from '../../config';\n\nimport Quiz from '../Quiz/Quiz';\nimport Report from '../Report/Report';\nimport ReportNA from '../ReportNA/ReportNA';\n\n\nclass QuizBlock extends Component {\n  constructor(props) {\n    super(props);\n\n    // Get the right questions JSON part\n    console.log(this.props.location.state.questions) \n    var quizQuestionsBlock = this.props.location.state.questions.filter(d => d.surveytag === this.props.location.state.block_info.surveytag);\n    \n    // console.log(quizQuestionsBlock)\n    \n    this.state = {\n      counter: 0,\n      questionCount: 1, // count across all questions in the questionnaire \n      question: '',\n      answerOptions: [],\n      answer: '',\n      qtype: '',      // the type of the question to be asked\n      questionId: '', // Question id stored in the JS object, does not have to be consecuitive. \n      answersCount: {},\n      result: '',\n      constraint: [], \n      quizQuestionsBlock: quizQuestionsBlock,\n      participant_info: this.props.location.state.participant_info,\n      \n      // This is to be recorded and POSTED to the DB\n      answered_questionsId      : [],\n      answered_questionsContent : [],\n    \n    };\n\n   this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n   this.redirectToSurvey      = this.redirectToSurvey.bind(this);\n     \n  }\n\n  componentDidMount() {\n    const firstQuestion       = this.state.quizQuestionsBlock[0] \n\n    var shuffledAnswerOptions = this.state.quizQuestionsBlock.map(question =>this.NoShuffleArray(question.answers)); \n    \n    // if (this.state.do_shuffle===true){\n    //   const shuffledAnswerOptions = this.state.quizQuestionsBlock.map(question =>\n    //   this.shuffleArray(question.answers));\n    // }\n    \n    document.body.style.background= '#fff';\n    this.setState({\n      questionId:    firstQuestion.questionId,\n      qtype:         firstQuestion.qtype,\n      question:      firstQuestion.question,\n      answerOptions: shuffledAnswerOptions[0],\n      constraint:    firstQuestion.constraint\n    });\n  }\n\n  shuffleArray(array) {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue      = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex]  = temporaryValue;\n    }\n\n    return array;\n  }\n\nNoShuffleArray(array) {\n    var currentIndex = array.length;\n    return array;\n  }\n  // onAnswerSelected points to this function in AnswerOption.js \n  handleAnswerSelected(answerContent,questionId,event) {\n    // console.log(answerContent) \n    this.setUserAnswer(event.currentTarget.value,answerContent,questionId); // event.currentTarget.value); // to be changed to see what is recorded \n\n    if (this.state.questionCount < this.state.quizQuestionsBlock.length) {  // to change to the number of questions in this part of the Survey\n      setTimeout(() => this.setNextQuestion(), 300);\n    } else {\n      setTimeout(() => this.redirectToSurvey(), 300); \n    }\n  }\n\n  setUserAnswer(answer,answerContent,questionId) {\n\n    // This is to be recorded and POSTED to the DB\n    let answered_questionsId = this.state.answered_questionsId;\n      answered_questionsId.push(questionId)\n\n    let answered_questionsContent = this.state.answered_questionsContent;\n      answered_questionsContent.push(answerContent)\n\n    this.setState((state, props) => ({\n      answer: answer,\n      answered_questionsId: answered_questionsId,\n      answered_questionsContent: answered_questionsContent, \n    }));\n\n  }\n\n  setNextQuestion() {\n    const counter       = this.state.counter + 1;\n    const questionCount = this.state.questionCount + 1;\n    const nextQuestion  = this.state.quizQuestionsBlock[counter]\n\n    this.setState({\n      counter: counter,\n      questionCount: questionCount,\n      questionId: nextQuestion.questionId,\n      question: nextQuestion.question,\n      answerOptions: nextQuestion.answers,\n      answer: '',\n      qtype: nextQuestion.qtype,\n      constraint: nextQuestion.constraint // check if exists otherwise empty to implement \n    });\n  }\n\n  redirectToSurvey ()\n\n  {\n    let block_id = this.state.participant_info.block_number+1\n\n    if (this.state.participant_info.block_number < this.state.participant_info.TotalBlock) {\n      var completed = 'no'}\n    else if (this.state.participant_info.block_number === this.state.participant_info.TotalBlock) {\n      var completed = 'yes' // add if it is aborted here later \n    }\n\n    let body     = {        'participant_id'  : this.state.participant_info.participant_id, \n                            'prolific_id'     : this.state.participant_info.prolific_id, \n                            'block_number'    : this.state.participant_info.block_number+1, \n                            'block_name'      : this.props.location.state.block_info.surveytag, \n                            'question_ids'    : this.state.answered_questionsId, \n                            'answers'         : this.state.answered_questionsContent,\n                            'date'            : this.state.participant_info.date,\n                            'survey_completed': completed\n                          }\n\n  // console.log(body)\n  fetch(`${API_URL}/participants_question_data/create/` + this.state.participant_info.participant_id + `/` + block_id + `/` + this.state.participant_info.prolific_id, {\n       method: 'POST',\n       headers: {\n         'Accept': 'application/json',\n         'Content-Type': 'application/json',\n       },    \n       body: JSON.stringify(body)\n     })\n\n  this.props.history.push({\n      pathname: `/Survey`,\n      state: {participant_info:this.state.participant_info,newblock_frame: false}\n    })\n  }\n  \n  setResults(result) {\n    if (result.length === 1) {\n      this.setState({ result: result[0] });\n    } else {\n      this.setState({ result: 'Undetermined' });\n    }\n  }\n\n  renderQuiz() {\n    if (this.state.qtype === \"quiz\") \n    { \n      return (\n        <Quiz\n          answer          ={this.state.answer}  \n          answerOptions   ={this.state.answerOptions} \n          questionId      ={this.state.questionId}\n          questionCount   ={this.state.questionCount}\n          question        ={this.state.question}\n          questionTotal   ={this.state.quizQuestionsBlock.length}\n          onAnswerSelected={this.handleAnswerSelected}\n        />\n      );\n    } \n\n    else if (this.state.qtype === \"report\")\n\n    {  \n      return (\n        <Report\n          answer          ={this.state.answer}\n          answerOptions   ={this.state.answerOptions}\n          questionId      ={this.state.questionId}\n          questionCount   ={this.state.questionCount}\n          question        ={this.state.question}\n          questionTotal   ={this.state.quizQuestionsBlock.length}\n          onAnswerSelected={this.handleAnswerSelected}\n          // questions       ={this.state.questions}\n          constraint      ={this.state.constraint}\n          participant_info={this.state.participant_info}\n        />\n      );\n  }\n\n  else if (this.state.qtype === \"report-na\") \n  {\n\n    return (\n        <ReportNA\n          answer          ={this.state.answer}\n          answerOptions   ={this.state.answerOptions}\n          questionId      ={this.state.questionId}\n          questionCount   ={this.state.questionCount}\n          question        ={this.state.question}\n          questionTotal   ={this.state.quizQuestionsBlock.length}\n          onAnswerSelected={this.handleAnswerSelected}\n          constraint      ={this.state.constraint}\n          participant_info={this.state.participant_info}\n      />\n    );\n\n\n\n  }\n}\n\n  render() {\n    return (\n      <div className=\"QuizBlock\">\n        <div className=\"QuizBlock-header\">\n          <h2>{this.state.quizQuestionsBlock[this.state.counter].title}</h2>\n        </div>\n        {this.state.result ? this.redirectToSurvey() : this.renderQuiz()} \n      </div>\n    );\n  }\n}\n\nexport default QuizBlock;\n"]},"metadata":{},"sourceType":"module"}