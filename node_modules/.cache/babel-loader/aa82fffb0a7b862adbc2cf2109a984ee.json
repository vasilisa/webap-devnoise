{"ast":null,"code":"var _jsxFileName = \"/Users/vasilisaskvortsova/Documents/RLNOISE_KIDS/webap-rlnoise-kids/src/components/ReportNA/ReportNA.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport Question from '../QuizQuestion/Question';\nimport QuestionCount from '../QuizQuestion/QuestionCount';\nimport AnswerOption from '../QuizQuestion/AnswerOption';\n\nclass ReportNA extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      report: '',\n      answer: '',\n      answercheck: false\n    }; // console.log(this.state) // initial states \n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChangeReport = this.handleChangeReport.bind(this);\n    this.renderAnswerOptions = this.renderAnswerOptions.bind(this);\n  }\n\n  componentDidMount() {\n    this._isMounted = true; // document.getElementById(\"create-course-form\").reset();\n\n    document.body.style.background = '#fff';\n    this.setState({\n      report: '',\n      answer: '',\n      answercheck: false,\n      shouldBlockNavigation: false\n    });\n    window.history.pushState(window.state, null, window.location.href);\n    window.addEventListener('keypress', e => this._handleRefresh(e));\n  }\n\n  _handleRefresh(evt) {\n    if (evt.key === 'Enter') {\n      if (window.confirm(\"You are about to leave the survey. All your answers would be lost and you will have to start the survey from the beginning. Are you sure you want to proceed?\")) {\n        this.props.history.push({\n          pathname: `/Intro_Survey`,\n          state: {\n            participant_info: this.props.participant_info\n          } // contains participant ID, prolific ID and date-time of the experiment start \n\n        });\n      }\n    }\n  }\n\n  handleChangeReport(event) {\n    var test = Number(event.target.value);\n    this.setState({\n      report: event.target.value,\n      answercheck: false\n    }); // console.log(Number(test))\n\n    if (test !== \"\" && test !== null && test > parseInt(this.props.constraint[0].min) && test < parseInt(this.props.constraint[1].max)) {\n      this.setState({\n        answercheck: true\n      }); // console.log(this.state.answer) \n    }\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.props.onAnswerSelected(this.state.report, this.props.questionId, event);\n  }\n\n  renderAnswerOptions(key) {\n    return React.createElement(AnswerOption, {\n      key: key.content,\n      answerContent: key.content,\n      answerType: key.type,\n      answer: this.props.answer,\n      questionId: this.props.questionId,\n      onAnswerSelected: this.props.onAnswerSelected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    return React.createElement(CSSTransitionGroup, {\n      className: \"container\",\n      component: \"div\",\n      transitionName: \"fade\",\n      transitionEnterTimeout: 800,\n      transitionLeaveTimeout: 500,\n      transitionAppear: true,\n      transitionAppearTimeout: 500,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      key: this.props.questionId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(QuestionCount, {\n      counter: this.props.questionCount,\n      total: this.props.questionTotal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(Question, {\n      content: this.props.question,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"col-md-6 no-padding\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      value: this.state.report,\n      onChange: this.handleChangeReport,\n      name: \"report\",\n      id: \"report\",\n      className: \"form-control\",\n      placeholder: \"\",\n      type: \"number\",\n      pattern: \"[0-9]*\",\n      inputMode: \"numeric\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"col-md-12 pad-20\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-save btn-primary pad-20\",\n      disabled: !this.state.answercheck,\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Submit\"))), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"answerOptions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, this.props.answerOptions.map(this.renderAnswerOptions))));\n  }\n\n}\n\nReportNA.propTypes = {\n  answer: PropTypes.string.isRequired,\n  question: PropTypes.string.isRequired,\n  questionId: PropTypes.number.isRequired,\n  questionTotal: PropTypes.number.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired,\n  constraint: PropTypes.array.isRequired,\n  participant_info: PropTypes.object.isRequired\n};\nexport default withRouter(ReportNA);","map":{"version":3,"sources":["/Users/vasilisaskvortsova/Documents/RLNOISE_KIDS/webap-rlnoise-kids/src/components/ReportNA/ReportNA.js"],"names":["React","PropTypes","withRouter","CSSTransitionGroup","Question","QuestionCount","AnswerOption","ReportNA","Component","constructor","props","state","report","answer","answercheck","handleSubmit","bind","handleChangeReport","renderAnswerOptions","componentDidMount","_isMounted","document","body","style","background","setState","shouldBlockNavigation","window","history","pushState","location","href","addEventListener","e","_handleRefresh","evt","key","confirm","push","pathname","participant_info","event","test","Number","target","value","parseInt","constraint","min","max","preventDefault","onAnswerSelected","questionId","content","type","render","questionCount","questionTotal","question","answerOptions","map","propTypes","string","isRequired","number","func","array","object"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {withRouter} from 'react-router-dom';\n\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport Question from '../QuizQuestion/Question';\nimport QuestionCount from '../QuizQuestion/QuestionCount';\nimport AnswerOption from '../QuizQuestion/AnswerOption';\n\n\nclass ReportNA extends React.Component {\n\n  constructor(props){\n    super(props);\n\n  this.state = {\n    report: '',\n    answer: '',\n    answercheck: false  \n\n  }\n  // console.log(this.state) // initial states \n\n  this.handleSubmit        = this.handleSubmit.bind(this);  \n  this.handleChangeReport  = this.handleChangeReport.bind(this);\n  this.renderAnswerOptions = this.renderAnswerOptions.bind(this); \n}\n\n\ncomponentDidMount() {\n  this._isMounted = true;\n  // document.getElementById(\"create-course-form\").reset();\n  document.body.style.background= '#fff';   \n  this.setState({\n    report: '',\n    answer: '',\n    answercheck: false,\n    shouldBlockNavigation: false}\n    )\n  window.history.pushState(window.state, null, window.location.href);\n  window.addEventListener('keypress' , e => this._handleRefresh(e));\n}\n\n_handleRefresh(evt){\n  if (evt.key==='Enter') {\n\n  if (window.confirm(\"You are about to leave the survey. All your answers would be lost and you will have to start the survey from the beginning. Are you sure you want to proceed?\")){\n  this.props.history.push({\n       pathname: `/Intro_Survey`, \n       state: {participant_info: this.props.participant_info} // contains participant ID, prolific ID and date-time of the experiment start \n     })\n  }\n}\n}\n\n  handleChangeReport(event) {\n\n  var test = Number(event.target.value)\n\n  this.setState({\n    report: event.target.value,\n    answercheck: false \n    }\n    );\n  \n  // console.log(Number(test))\n\n  if ((test!==\"\") && (test!==null) && (test>parseInt(this.props.constraint[0].min)) && (test<parseInt(this.props.constraint[1].max))) {\n    this.setState({\n    answercheck: true }\n    );\n    // console.log(this.state.answer) \n  }\n\n}\n\n  handleSubmit(event) {\n        event.preventDefault();\n        this.props.onAnswerSelected(this.state.report,this.props.questionId,event)\n        \n  }\n\n  renderAnswerOptions(key) {\n    return (\n      <AnswerOption\n        key={key.content}\n        answerContent={key.content}\n        answerType={key.type}\n        answer={this.props.answer}\n        questionId={this.props.questionId}\n        onAnswerSelected={this.props.onAnswerSelected}\n      />\n    );\n}\n\nrender() {\n  return (\n    <CSSTransitionGroup\n      className=\"container\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}\n    >\n      <div key={this.props.questionId}>\n        <QuestionCount counter={this.props.questionCount} total={this.props.questionTotal} />\n        <Question content={this.props.question} />\n        <div className=\"col-md-6 no-padding\">\n        <input value={this.state.report} onChange={this.handleChangeReport} name=\"report\" id=\"report\" className=\"form-control\" placeholder=\"\" type=\"number\" pattern=\"[0-9]*\" inputMode=\"numeric\" required />\n        </div>\n        <p></p>\n        </div>\n      <p></p>\n      <div className=\"col-md-12 pad-20\">\n        <div>\n          <button type=\"submit\" className=\"btn btn-save btn-primary pad-20\" disabled={!this.state.answercheck} onClick={this.handleSubmit}>Submit\n            </button>\n          </div>\n      </div>\n      <p></p>\n      <div className=\"row\">\n        <ul className=\"answerOptions\">\n          {this.props.answerOptions.map(this.renderAnswerOptions)}\n        </ul>\n      </div>\n      \n    </CSSTransitionGroup>\n  );\n}\n}\n\nReportNA.propTypes = {\n  answer: PropTypes.string.isRequired,\n  question: PropTypes.string.isRequired,\n  questionId: PropTypes.number.isRequired,\n  questionTotal: PropTypes.number.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired,\n  constraint: PropTypes.array.isRequired,\n  participant_info:PropTypes.object.isRequired\n};\n\n\nexport default withRouter(ReportNA);"]},"metadata":{},"sourceType":"module"}