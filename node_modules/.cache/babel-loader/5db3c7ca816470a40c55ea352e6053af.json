{"ast":null,"code":"var _jsxFileName = \"/Users/vasilisaskvortsova/Documents/RLNOISE_KIDS/webap-rlnoise-kids/src/components/Block/Block.js\";\nimport React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { withRouter } from 'react-router-dom';\nimport { API_URL } from '../../config';\nimport { handleResponse } from '../helpers';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport Score from '../Score/Score';\nimport './Block.css';\n\nclass Block extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.redirectToSurvey = () => {\n      // Post the bonus amount together with the prolific id and participant ids in the ParticipantsDataBonus table: \n      let body = {\n        'participant_id': this.state.participant_info.participant_id,\n        'prolific_id': this.state.participant_info.prolific_id,\n        'date': this.state.participant_info.date,\n        'bonus': this.state.score\n      }; // console.log(body) \n\n      fetch(`${API_URL}/participants_data_bonus/create/` + this.state.participant_info.participant_id + '/' + this.state.participant_info.prolific_id, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n      });\n      this.props.history.push({\n        pathname: `/Intro_Survey`,\n        state: {\n          participant_info: this.state.participant_info\n        } // to verify what is actually imported to a new page and what you need \n\n      });\n    };\n\n    const participant_info = this.props.location.state.participant_info;\n    const block_info = {\n      position: [],\n      reward_1: [],\n      reward_2: [],\n      block_feedback: '',\n      trial_numb: 0,\n      block_number: '',\n      block_type: '',\n      TotalTrial: ''\n    };\n    this.state = {\n      participant_info: participant_info,\n      block_info: block_info,\n      newblock_frame: this.props.location.state.newblock_frame,\n      pool_symbols: {},\n      score: -1,\n      load_bonus: false\n    };\n    this.fetchBlock.bind(this);\n    this.fetchSymbols.bind(this);\n    this.redirectToScore.bind(this);\n    this.redirectToSurvey.bind(this);\n    this._isMounted = false;\n\n    this._handleGoBack.bind(this);\n  }\n\n  restartTraining() {\n    this.setState({\n      newblock_frame: true,\n      participant_info: { ...this.state.participant_info,\n        block_number: 0\n      }\n    });\n    this.fetchBlock(this.state.participant_info.blocks_ids[0]);\n    this._isMounted && this.fetchSymbols(0);\n  }\n\n  redirectToTarget() {\n    // console.log(this.state.pool_symbols)\n    if (this.state.participant_info.block_number <= this.state.participant_info.TotalBlock) {\n      if (this.state.newblock_frame) {\n        this.setState({\n          newblock_frame: false\n        });\n        this.props.history.push({\n          pathname: `/Board`,\n          state: {\n            participant_info: this.state.participant_info,\n            block_info: this.state.block_info,\n            pool_symbols: this.state.pool_symbols\n          }\n        });\n      } else {\n        if (this._isMounted) {\n          // console.log(this.state.participant_info.block_number)\n          const newblocknumber = this.state.participant_info.block_number + 1; // console.log(newblocknumber)\n\n          if (newblocknumber === this.state.participant_info.TotalBlock + 1) {\n            // console.log('Fetching the score')\n            this.fetchScore();\n          } else {\n            this.fetchBlock(this.state.participant_info.game_id, newblocknumber + 1); //this.state.participant_info.block_number\n\n            this.fetchSymbols(this.state.participant_info.game_id, newblocknumber + 1);\n            this.setState({\n              newblock_frame: true,\n              participant_info: { ...this.state.participant_info,\n                block_number: newblocknumber\n              }\n            }); // what gets updated \n          }\n        }\n      }\n    }\n  } // When the task is over \n\n\n  fetchScore() {\n    if (this._isMounted) {\n      fetch(`${API_URL}/participants_data/score/` + this.state.participant_info.participant_id + '/' + this.state.participant_info.game_id + '/' + this.state.participant_info.prolific_id).then(handleResponse).then(data => {\n        const bonus = data['bonus']; // console.log(bonus)\n\n        this.setState({\n          score: bonus,\n          loading: false,\n          load_bonus: true,\n          newblock_frame: true,\n          participant_info: { ...this.state.participant_info,\n            block_number: this.state.participant_info.TotalBlock + 1\n          }\n        });\n      }).catch(error => {\n        this.setState({\n          error: error.errorMessage,\n          loading: false,\n          load_bonus: false\n        });\n      });\n    }\n  }\n\n  redirectToScore() {\n    if (this.state.load_bonus === false) {\n      this.fetchScore();\n    } else if (this.state.load_bonus === true) {\n      return React.createElement(Score, {\n        score: this.state.score,\n        onClicked: this.redirectToSurvey,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      });\n    }\n  }\n\n  componentDidMount() {\n    this._isMounted = true; // document.body.style.background= '#fff';   \n\n    this._isMounted && this.fetchBlock(this.state.participant_info.game_id, this.state.participant_info.block_number + 1);\n    this._isMounted && this.fetchSymbols(this.state.participant_info.game_id, this.state.participant_info.block_number + 1);\n    window.history.pushState(window.state, null, window.location.href);\n    window.addEventListener('popstate', e => this._handleGoBack(e));\n    window.onbeforeunload = this._handleRefresh;\n  }\n\n  _handleRefresh(evt) {\n    return false; // error message when refresh occurs\n  }\n\n  _handleGoBack(event) {\n    window.history.go(1);\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  fetchSymbols(game_id_, block_number_) {\n    fetch(`${API_URL}/games/` + game_id_ + '/' + block_number_).then(handleResponse).then(data => {\n      const required_pool_of_symbols = Object.keys(data['symbols']).map((key, index) => require('../../images/' + data['symbols'][key])); // console.log(data['symbols'])  \n\n      this.setState({\n        pool_symbols: required_pool_of_symbols,\n        loading: false\n      });\n    }).catch(error => {\n      this.setState({\n        error: error.errorMessage,\n        loading: false\n      });\n    });\n  } // This is to get the data for a specific block from the Back \n\n\n  async fetchBlock(game_id_, block_number_) {\n    // console.log(block_number_)\n    this.setState({\n      loading: true\n    });\n    const fetchResult = fetch(`${API_URL}/game_blocks/` + game_id_ + '/' + block_number_).then(handleResponse).then(data => {\n      const block_info = {\n        block_number: data.block_number,\n        block_feedback: data.block_feedback,\n        block_type: data.block_type,\n        reward_1: Object.keys(data['reward_1']).map((key, index) => data['reward_1'][key]),\n        reward_2: Object.keys(data['reward_2']).map((key, index) => data['reward_2'][key]),\n        th_reward_1: Object.keys(data['th_reward_1']).map((key, index) => data['th_reward_1'][key]),\n        th_reward_2: Object.keys(data['th_reward_2']).map((key, index) => data['th_reward_2'][key]),\n        position: Object.keys(data['position']).map((key, index) => data['position'][key]),\n        trial_numb: 0,\n        TotalTrial: Object.keys(data['reward_1']).length\n      };\n      this.setState({\n        block_info: block_info\n      }); // console.log(this.state.block_info)\n    }).catch(error => {\n      this.setState({\n        error: error.errorMessage,\n        loading: false\n      });\n    });\n    const response = await fetchResult;\n    return response;\n  }\n\n  render() {\n    let text;\n\n    if (this.state.participant_info.block_number === 0 && this.state.newblock_frame && this.state.block_info.block_feedback === \"1\") {\n      text = React.createElement(\"div\", {\n        className: \"textbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, \" \", React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, \"This is a \", React.createElement(\"span\", {\n        class: \"bold\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, \"partial\"), \" feedback block: you will \", React.createElement(\"span\", {\n        class: \"bold\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, \"only\"), \" see the feedback of the \", React.createElement(\"span\", {\n        class: \"bold\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, \"chosen\"), \" slot machine.\"), React.createElement(\"div\", {\n        className: \"translate\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        className: \"introsymbol\",\n        src: require('../../images/symbol_shape_0_grate_None_color_3.png'),\n        alt: \"introsymbol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        className: \"introsymbol\",\n        src: require('../../images/symbol_shape_2_grate_None_color_0.png'),\n        alt: \"introsymbol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }));\n      return React.createElement(CSSTransitionGroup, {\n        className: \"container\",\n        component: \"div\",\n        transitionName: \"fade\",\n        transitionEnterTimeout: 800,\n        transitionLeaveTimeout: 500,\n        transitionAppear: true,\n        transitionAppearTimeout: 500,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"instructionsButtonContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, text), React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"buttonInstructions\",\n        onClick: () => this.redirectToTarget(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, \"\\u2192\"))))));\n    } else if (this.state.participant_info.block_number === 0 && this.state.newblock_frame && this.state.block_info.block_feedback === \"2\") {\n      text = React.createElement(\"div\", {\n        className: \"textbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, \" \", React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, \"This is a \", React.createElement(\"span\", {\n        class: \"bold\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, \"complete\"), \" feedback block: you will see \", React.createElement(\"span\", {\n        class: \"bold\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, \"both \"), \" the feedback of the \", React.createElement(\"span\", {\n        class: \"bold\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, \"chosen\"), \" and \", React.createElement(\"span\", {\n        class: \"bold\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, \"unchosen\"), \" slot machines.\"), React.createElement(\"div\", {\n        className: \"translate\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        className: \"introsymbol\",\n        src: require('../../images/symbol_shape_0_grate_None_color_3.png'),\n        alt: \"introsymbol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        className: \"introsymbol\",\n        src: require('../../images/symbol_shape_2_grate_None_color_0.png'),\n        alt: \"introsymbol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }));\n      return React.createElement(CSSTransitionGroup, {\n        className: \"container\",\n        component: \"div\",\n        transitionName: \"fade\",\n        transitionEnterTimeout: 800,\n        transitionLeaveTimeout: 500,\n        transitionAppear: true,\n        transitionAppearTimeout: 500,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"instructionsButtonContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }, text), React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"buttonInstructions\",\n        onClick: () => this.redirectToTarget(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }, \"\\u2192\"))))));\n    } else if (this.state.participant_info.block_number === 1 && this.state.newblock_frame && this.state.block_info.block_feedback === \"1\") {\n      text = React.createElement(\"div\", {\n        className: \"textbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }, \"Did you notice that the most rewarding colored shape was not the same throughout the session?\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }, \"At the beginning it was \", React.createElement(\"span\", {\n        class: \"bold red\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }, \" the red circle \"), \" but in the middle of the session it changed, and \", React.createElement(\"span\", {\n        class: \"bold blue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }, \"the blue star \"), \" became more rewarding?!\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }, \" It is important that you track these changes in order to maximize your performance and increase your chance to win a bonus!\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, \"Let's do another training session with \", React.createElement(\"span\", {\n        class: \"bold\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, \"partial feedback\"), \"now: you will \", React.createElement(\"span\", {\n        class: \"bold\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, \"only\"), \" see the feedback of the \", React.createElement(\"span\", {\n        class: \"bold\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, \"chosen\"), \" slot machine.\"), React.createElement(\"div\", {\n        className: \"translate\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        className: \"introsymbol\",\n        src: require('../../images/symbol_shape_1_grate_None_color_2.png'),\n        alt: \"introsymbol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        className: \"introsymbol\",\n        src: require('../../images/symbol_shape_3_grate_None_color_1.png'),\n        alt: \"introsymbol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }));\n      return React.createElement(CSSTransitionGroup, {\n        className: \"container\",\n        component: \"div\",\n        transitionName: \"fade\",\n        transitionEnterTimeout: 800,\n        transitionLeaveTimeout: 500,\n        transitionAppear: true,\n        transitionAppearTimeout: 500,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"instructionsButtonContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335\n        },\n        __self: this\n      }, text), React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"buttonInstructions\",\n        onClick: () => this.redirectToTarget(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339\n        },\n        __self: this\n      }, \"\\u2192\"))))));\n    } else if (this.state.participant_info.block_number === 1 && this.state.newblock_frame && this.state.block_info.block_feedback === \"2\") {\n      text = React.createElement(\"div\", {\n        className: \"textbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351\n        },\n        __self: this\n      }, \"Did you that the most rewarding colored shape was not the same throughout the session?\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353\n        },\n        __self: this\n      }, \"At the beginning it was \", React.createElement(\"span\", {\n        class: \"bold red\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353\n        },\n        __self: this\n      }, \"the red circle \"), \" but in the middle of the session it changed, and \", React.createElement(\"span\", {\n        class: \"bold blue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353\n        },\n        __self: this\n      }, \"the blue star \"), \" became more rewarding?!\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355\n        },\n        __self: this\n      }, \"It is important that you track these changes in order to maximize your performance and increase your chance to win a bonus!\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      }, \"Let's do another training session with \", React.createElement(\"span\", {\n        class: \"bold\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      }, \"complete feedback\"), \" now: you will see \", React.createElement(\"span\", {\n        class: \"bold\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      }, \"both\"), \" the feedback of the \", React.createElement(\"span\", {\n        class: \"bold\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      }, \"chosen\"), \" and \", React.createElement(\"span\", {\n        class: \"bold\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      }, \"unchosen\"), \" slot machines.\"), React.createElement(\"div\", {\n        className: \"translate\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        className: \"introsymbol\",\n        src: require('../../images/symbol_shape_1_grate_None_color_2.png'),\n        alt: \"introsymbol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        className: \"introsymbol\",\n        src: require('../../images/symbol_shape_3_grate_None_color_1.png'),\n        alt: \"introsymbol\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359\n        },\n        __self: this\n      }));\n      return React.createElement(CSSTransitionGroup, {\n        className: \"container\",\n        component: \"div\",\n        transitionName: \"fade\",\n        transitionEnterTimeout: 800,\n        transitionLeaveTimeout: 500,\n        transitionAppear: true,\n        transitionAppearTimeout: 500,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"instructionsButtonContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374\n        },\n        __self: this\n      }, text), React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"buttonInstructions\",\n        onClick: () => this.redirectToTarget(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378\n        },\n        __self: this\n      }, \"\\u2192\"))))));\n    } else if (this.state.participant_info.block_number === 1 && this.state.newblock_frame === false) {\n      text = React.createElement(\"div\", {\n        className: \"textbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389\n        },\n        __self: this\n      }, \" You finished the training!\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391\n        },\n        __self: this\n      }, \" Let's start the task now! \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392\n        },\n        __self: this\n      }, \" At the beginning of each block you will see if you are playing \", React.createElement(\"span\", {\n        class: \"bold\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392\n        },\n        __self: this\n      }, \"partial\"), \" or \", React.createElement(\"span\", {\n        class: \"bold\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392\n        },\n        __self: this\n      }, \"complete\"), \" feedback block! \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393\n        },\n        __self: this\n      }, \" Finding the most rewarding slot machine will be harder than during the training, so pay attention! \"));\n      return React.createElement(CSSTransitionGroup, {\n        className: \"container\",\n        component: \"div\",\n        transitionName: \"fade\",\n        transitionEnterTimeout: 800,\n        transitionLeaveTimeout: 500,\n        transitionAppear: true,\n        transitionAppearTimeout: 500,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"restarttraining\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406\n        },\n        __self: this\n      }, text, \"  \", React.createElement(\"div\", {\n        className: \"translate\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407\n        },\n        __self: this\n      })), React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"buttonInstructions\",\n        onClick: () => this.redirectToTarget(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410\n        },\n        __self: this\n      }, \"\\u2192\"))))));\n    } else if (this.state.participant_info.block_number === this.state.participant_info.TotalBlock + 1 && this.state.load_bonus === true) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423\n        },\n        __self: this\n      }, this.redirectToScore());\n    } else {\n      const feedback_type_text = this.state.block_info.block_feedback === \"1\" ? 'PARTIAL' : 'COMPLETE';\n      const end_of_block_text = this.state.block_info.block_type === \"training\" ? 'End of training block' : 'End of block ' + (this.state.participant_info.block_number - 1);\n\n      if (this.state.newblock_frame) {\n        text = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 434\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 434\n          },\n          __self: this\n        }, \"The next block is \", React.createElement(\"span\", {\n          class: \"bold\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 434\n          },\n          __self: this\n        }, feedback_type_text), \" feedback block!\"));\n      } else {\n        text = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 438\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 438\n          },\n          __self: this\n        }, end_of_block_text)); //'End of block ' + (this.state.participant_info.block_number+1)\n      }\n\n      return React.createElement(CSSTransitionGroup, {\n        className: \"container\",\n        component: \"div\",\n        transitionName: \"fade\",\n        transitionEnterTimeout: 800,\n        transitionLeaveTimeout: 800,\n        transitionAppear: true,\n        transitionAppearTimeout: 800,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 441\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 450\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 451\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"restarttraining\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 452\n        },\n        __self: this\n      }, text), React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"buttonInstructionStart\",\n        onClick: () => this.redirectToTarget(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 456\n        },\n        __self: this\n      }, \"\\u2192\")))));\n    }\n  }\n\n}\n\nexport default withRouter(Block);","map":{"version":3,"sources":["/Users/vasilisaskvortsova/Documents/RLNOISE_KIDS/webap-rlnoise-kids/src/components/Block/Block.js"],"names":["React","Button","withRouter","API_URL","handleResponse","CSSTransitionGroup","Score","Block","Component","constructor","props","redirectToSurvey","body","state","participant_info","participant_id","prolific_id","date","score","fetch","method","headers","JSON","stringify","history","push","pathname","location","block_info","position","reward_1","reward_2","block_feedback","trial_numb","block_number","block_type","TotalTrial","newblock_frame","pool_symbols","load_bonus","fetchBlock","bind","fetchSymbols","redirectToScore","_isMounted","_handleGoBack","restartTraining","setState","blocks_ids","redirectToTarget","TotalBlock","newblocknumber","fetchScore","game_id","then","data","bonus","loading","catch","error","errorMessage","componentDidMount","window","pushState","href","addEventListener","e","onbeforeunload","_handleRefresh","evt","event","go","componentWillUnmount","game_id_","block_number_","required_pool_of_symbols","Object","keys","map","key","index","require","fetchResult","th_reward_1","th_reward_2","length","response","render","text","feedback_type_text","end_of_block_text"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Button } from 'react-bootstrap';\nimport {withRouter} from 'react-router-dom';\nimport { API_URL } from '../../config';\nimport { handleResponse } from '../helpers';\n\nimport { CSSTransitionGroup } from 'react-transition-group';\n\n\nimport Score from '../Score/Score';\n\nimport './Block.css'\n\n\nclass Block extends React.Component {\n  constructor(props){\n    super(props);\n    const participant_info = this.props.location.state.participant_info\n    \n    const block_info = {\n\n      position      : [],\n      reward_1      : [],\n      reward_2      : [],\n      block_feedback: '',  \n      trial_numb    : 0,\n      block_number  : '',\n      block_type    : '',\n      TotalTrial    : ''\n    }\n\n    this.state = {\n      participant_info : participant_info,\n      block_info       : block_info,\n      newblock_frame   : this.props.location.state.newblock_frame,\n      pool_symbols     : {},\n      score : -1,\n      load_bonus: false\n    }\n\n    this.fetchBlock.bind(this);\n    this.fetchSymbols.bind(this);\n    this.redirectToScore.bind(this); \n    this.redirectToSurvey.bind(this); \n    this._isMounted = false;\n    this._handleGoBack.bind(this);   \n  }\n\n  \n  restartTraining () {\n    this.setState({newblock_frame : true, participant_info : {...this.state.participant_info, block_number:0},})\n    this.fetchBlock(this.state.participant_info.blocks_ids[0])\n    this._isMounted && this.fetchSymbols(0);\n  }\n\n  redirectToTarget () {\n      // console.log(this.state.pool_symbols)\n      if((this.state.participant_info.block_number <= (this.state.participant_info.TotalBlock)))\n          {           \n          if (this.state.newblock_frame){\n          this.setState({newblock_frame : false})\n          this.props.history.push({\n           pathname: `/Board`,\n           state: {participant_info: this.state.participant_info,\n                   block_info      : this.state.block_info,\n                   pool_symbols    : this.state.pool_symbols\n                 }\n          })}\n          else\n          {\n            if (this._isMounted)\n            {\n              \n              // console.log(this.state.participant_info.block_number)\n              const newblocknumber = this.state.participant_info.block_number + 1\n              // console.log(newblocknumber)\n\n              if (newblocknumber === this.state.participant_info.TotalBlock+1){\n                // console.log('Fetching the score')\n                this.fetchScore()\n                }\n\n              else {\n                this.fetchBlock(this.state.participant_info.game_id,newblocknumber+1) //this.state.participant_info.block_number\n              \n                this.fetchSymbols(this.state.participant_info.game_id,newblocknumber+1); \n              \n                this.setState({newblock_frame : true, participant_info : {...this.state.participant_info, block_number:newblocknumber},}) // what gets updated \n              }\n            }\n          }\n        }\n      }\n    \n  // When the task is over \n  fetchScore() {\n  if (this._isMounted) {\n\n    fetch(`${API_URL}/participants_data/score/`+ this.state.participant_info.participant_id +'/'+ this.state.participant_info.game_id +'/'+this.state.participant_info.prolific_id)\n            .then(handleResponse)\n            .then((data) => {\n              const bonus = data['bonus']\n              // console.log(bonus)\n\n              this.setState({\n                  score : bonus,\n                  loading : false,\n                  load_bonus: true,\n                  newblock_frame : true,\n                  participant_info : {...this.state.participant_info, block_number:this.state.participant_info.TotalBlock+1}\n                });\n            })\n            .catch((error) => {\n                this.setState({ error : error.errorMessage, loading: false, load_bonus: false });\n                 });\n}\n}\n\nredirectToScore() {\nif (this.state.load_bonus === false) {\n  this.fetchScore() \n}\n  \nelse if  (this.state.load_bonus === true){\n   return (\n        <Score\n          score      = {this.state.score}  \n          onClicked  = {this.redirectToSurvey}\n        />\n      );}\n }\n\nredirectToSurvey = () => {\n\n  // Post the bonus amount together with the prolific id and participant ids in the ParticipantsDataBonus table: \n  let body = { \n              'participant_id'  : this.state.participant_info.participant_id,\n              'prolific_id'     : this.state.participant_info.prolific_id,\n              'date'            : this.state.participant_info.date,\n              'bonus'           : this.state.score}\n              \n    // console.log(body) \n    fetch(`${API_URL}/participants_data_bonus/create/`+this.state.participant_info.participant_id +'/'+this.state.participant_info.prolific_id, {\n       method: 'POST',\n       headers: {\n         'Accept': 'application/json',\n         'Content-Type': 'application/json',\n       },\n       body: JSON.stringify(body)\n     })\n\n    this.props.history.push({\n      pathname: `/Intro_Survey`,\n      state: {participant_info: this.state.participant_info} // to verify what is actually imported to a new page and what you need \n    })\n  } \n  componentDidMount() {  \n  this._isMounted = true;\n  // document.body.style.background= '#fff';   \n  this._isMounted && this.fetchBlock(this.state.participant_info.game_id,this.state.participant_info.block_number+1);\n  this._isMounted && this.fetchSymbols(this.state.participant_info.game_id,this.state.participant_info.block_number+1);\n  window.history.pushState(window.state, null, window.location.href);\n  window.addEventListener('popstate', e => this._handleGoBack(e));\n  window.onbeforeunload = this._handleRefresh\n  }\n\n  _handleRefresh(evt){\n    return false // error message when refresh occurs\n  }\n\n  _handleGoBack(event){\n    window.history.go(1);\n  }\n\n  componentWillUnmount()\n  {\n   this._isMounted = false;\n  }  \n\n\n  fetchSymbols(game_id_,block_number_) {\n    fetch(`${API_URL}/games/`+game_id_+'/'+block_number_) \n      .then(handleResponse)\n      .then((data) => {\n\n        const required_pool_of_symbols = Object.keys(data['symbols']).map((key, index) => (require('../../images/' + data['symbols'][key])))\n\n        // console.log(data['symbols'])  \n\n          this.setState({\n            pool_symbols : required_pool_of_symbols,\n            loading      : false \n\n          });\n        })\n\n      .catch((error) => {\n        this.setState({ error : error.errorMessage, loading: false });\n         });\n       }\n\n// This is to get the data for a specific block from the Back \n  async fetchBlock(game_id_,block_number_) {\n    // console.log(block_number_)\n    this.setState({ loading: true });\n    const fetchResult = fetch(`${API_URL}/game_blocks/`+game_id_+'/'+block_number_)\n      .then(handleResponse)\n      .then((data) => {\n\n        const block_info = {\n          block_number   : data.block_number,\n          block_feedback : data.block_feedback, \n          block_type     : data.block_type,\n          reward_1       : Object.keys(data['reward_1']).map((key, index) => (data['reward_1'][key])),\n          reward_2       : Object.keys(data['reward_2']).map((key, index) => (data['reward_2'][key])),\n          th_reward_1    : Object.keys(data['th_reward_1']).map((key, index) => (data['th_reward_1'][key])),\n          th_reward_2    : Object.keys(data['th_reward_2']).map((key, index) => (data['th_reward_2'][key])),\n          position       : Object.keys(data['position']).map((key, index) => (data['position'][key])),\n          trial_numb     : 0,\n          TotalTrial     : Object.keys(data['reward_1']).length \n        }\n          \n        this.setState({\n          block_info: block_info,\n        });\n        // console.log(this.state.block_info)\n      })\n        .catch((error) => {\n          this.setState({ error : error.errorMessage, loading: false });\n      });\n    const response = await fetchResult;\n    return response\n  }\n\n\nrender()\n  { \n    let text\n    if ((this.state.participant_info.block_number === 0) && (this.state.newblock_frame) && (this.state.block_info.block_feedback===\"1\"))\n    { \n      text = <div className='textbox'> <p>This is a <span class=\"bold\">partial</span> feedback block: you will <span class = \"bold\">only</span> see the feedback of the <span class = \"bold\">chosen</span> slot machine.</p> \n              <div className=\"translate\"/>\n                <img className=\"introsymbol\"  src={require('../../images/symbol_shape_0_grate_None_color_3.png')} alt='introsymbol' /> \n                <img className=\"introsymbol\"  src={require('../../images/symbol_shape_2_grate_None_color_0.png')} alt='introsymbol' /> \n            </div>\n\n    return (\n      <CSSTransitionGroup\n      className=\"container\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}>\n\n      <div>\n      <center> \n      <div className=\"instructionsButtonContainer\">\n        <div>\n          {text}           \n        </div> \n        <center>\n          <Button className=\"buttonInstructions\" onClick={()=>this.redirectToTarget()}>\n            &#8594;\n          </Button>\n        </center>\n      </div>\n      </center> \n      </div>\n      </CSSTransitionGroup>);\n    } \n\n    else if ((this.state.participant_info.block_number===0)  && (this.state.newblock_frame) && (this.state.block_info.block_feedback===\"2\"))\n    {\n      text = <div className='textbox'> <p>This is a <span class = \"bold\">complete</span> feedback block: you will see <span class = \"bold\">both </span> the feedback of the <span class=\"bold\">chosen</span> and <span class = \"bold\">unchosen</span> slot machines.</p> \n                <div className=\"translate\"/>\n                <img className=\"introsymbol\"  src={require('../../images/symbol_shape_0_grate_None_color_3.png')} alt='introsymbol'/> \n                <img className=\"introsymbol\"  src={require('../../images/symbol_shape_2_grate_None_color_0.png')} alt='introsymbol'/> \n                </div>\n      \n        return (\n          <CSSTransitionGroup\n      className=\"container\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}>\n\n          <div>\n          <center> \n          <div className=\"instructionsButtonContainer\">\n            <div>\n              {text}           \n            </div> \n            <center>\n              <Button className=\"buttonInstructions\" onClick={()=>this.redirectToTarget()}>\n              &#8594;\n              </Button>\n            </center>\n          </div>\n          </center>\n          </div>\n          </CSSTransitionGroup>\n          );\n    }\n    else if ((this.state.participant_info.block_number===1) && (this.state.newblock_frame) && (this.state.block_info.block_feedback===\"1\"))\n    {\n      text = <div className='textbox'> \n                <p>Did you notice that the most rewarding colored shape was not the same throughout the session?</p>\n                <p>At the beginning it was <span class=\"bold red\"> the red circle </span> but in the middle of the session it changed, and <span class=\"bold blue\">the blue star </span> became more rewarding?!</p>\n                <p></p>\n                <p> It is important that you track these changes in order to maximize your performance and increase your chance to win a bonus!</p>\n                <p>Let's do another training session with <span class = \"bold\">partial feedback</span>now: you will <span class=\"bold\">only</span> see the feedback of the <span class=\"bold\">chosen</span> slot machine.</p> \n                <div className=\"translate\"/>\n                <img className=\"introsymbol\"  src={require('../../images/symbol_shape_1_grate_None_color_2.png')} alt='introsymbol'/> \n                <img className=\"introsymbol\"  src={require('../../images/symbol_shape_3_grate_None_color_1.png')} alt='introsymbol'/> \n                </div>\n      \n        return (\n          <CSSTransitionGroup\n      className=\"container\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}>\n\n          <div>\n          <center> \n          <div className=\"instructionsButtonContainer\">\n            <div>\n              {text}           \n            </div>\n            <center>\n              <Button className=\"buttonInstructions\" onClick={()=>this.redirectToTarget()}>\n              &#8594;\n              </Button>\n            </center>\n          </div>\n          </center>\n          </div>\n          </CSSTransitionGroup>);\n    }\n    else if ((this.state.participant_info.block_number===1) && (this.state.newblock_frame) && (this.state.block_info.block_feedback===\"2\")) \n    { \n      text = <div className='textbox'> \n                <p>Did you \n                 that the most rewarding colored shape was not the same throughout the session?</p>\n                <p>At the beginning it was <span class=\"bold red\">the red circle </span> but in the middle of the session it changed, and <span class=\"bold blue\">the blue star </span> became more rewarding?!</p>\n                <p></p>\n                <p>It is important that you track these changes in order to maximize your performance and increase your chance to win a bonus!</p> \n                <p>Let's do another training session with <span class=\"bold\">complete feedback</span> now: you will see <span class=\"bold\">both</span> the feedback of the <span class=\"bold\">chosen</span> and <span class=\"bold\">unchosen</span> slot machines.</p> \n                <div className=\"translate\"/>\n                <img className=\"introsymbol\"  src={require('../../images/symbol_shape_1_grate_None_color_2.png')} alt='introsymbol'/> \n                <img className=\"introsymbol\"  src={require('../../images/symbol_shape_3_grate_None_color_1.png')} alt='introsymbol'/> \n                </div>\n        \n        return (\n          <CSSTransitionGroup\n      className=\"container\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}>\n        <div>\n        <center> \n        <div className=\"instructionsButtonContainer\">\n          <div>\n            {text}           \n          </div> \n            <center>\n            <Button className=\"buttonInstructions\" onClick={()=>this.redirectToTarget()}>\n            &#8594;\n            </Button>\n            </center>\n          </div>\n          </center>\n          </div>\n           </CSSTransitionGroup>);\n      }\n    else if ((this.state.participant_info.block_number===1) && (this.state.newblock_frame===false))\n    {\n      text = <div className='textbox'><p> You finished the training!</p>\n                  <p></p>\n                  <p> Let's start the task now! </p>\n                  <p> At the beginning of each block you will see if you are playing <span class = \"bold\">partial</span> or <span class = \"bold\">complete</span> feedback block! </p>\n                  <p> Finding the most rewarding slot machine will be harder than during the training, so pay attention! </p></div>\n      return (\n        <CSSTransitionGroup\n      className=\"container\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}>\n        <div>\n        <center> \n        <div>\n          <div className=\"restarttraining\">\n            {text}  <div className=\"translate\"/>\n          </div>\n          <center>\n            <Button className=\"buttonInstructions\" onClick={()=>this.redirectToTarget()}>\n            &#8594;\n            </Button>\n          </center>\n        </div>\n        </center>\n        </div>\n        </CSSTransitionGroup>);\n    }\n    else if ((this.state.participant_info.block_number===this.state.participant_info.TotalBlock+1) && (this.state.load_bonus===true))\n    {\n      return(\n\n          <div>{this.redirectToScore()}</div>       \n        )\n    }\n\n    else\n    {\n      const feedback_type_text = (this.state.block_info.block_feedback===\"1\") ? 'PARTIAL' : 'COMPLETE';\n      const end_of_block_text  = (this.state.block_info.block_type===\"training\") ? 'End of training block': 'End of block ' + (this.state.participant_info.block_number-1)\n      \n      if (this.state.newblock_frame) \n        {\n          text = <div><p>The next block is <span class =\"bold\">{feedback_type_text}</span> feedback block!</p></div>\n        }\n      else\n        { \n          text = <div><p>{end_of_block_text}</p></div> //'End of block ' + (this.state.participant_info.block_number+1)\n        }\n        return (\n          <CSSTransitionGroup\n      className=\"container\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={800}\n      transitionAppear\n      transitionAppearTimeout={800}>\n\n      <div>\n      <center>\n      <div className=\"restarttraining\">\n        {text}           \n      </div>\n        <center>\n        <Button className=\"buttonInstructionStart\" onClick={()=>this.redirectToTarget()}>\n          &#8594;\n        </Button>\n        </center>\n    </center>\n    </div>\n    </CSSTransitionGroup>);\n    }    \n  }\n\n}\n\nexport default withRouter(Block);"]},"metadata":{},"sourceType":"module"}